#version 460 core

#include "cube_sample.glsl"

#define PI 3.14f

layout(local_size_x = 16, local_size_y = 16) in;

layout(rgba32f, binding = 0) uniform readonly imageCube hdrMap;
layout(rgba32f, binding = 1) uniform writeonly imageCube map;

layout(push_constant) uniform Header
{
    int Face;
    int MaxTiles;
    int CurrentTileX;
    int CurrentTileY;
} header;

void main()
{
    vec2 cubemapSize = imageSize(map).xy;

    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    cubeCoord.xy += ivec2(header.CurrentTileX, header.CurrentTileY) * int(gl_NumWorkGroups.x * gl_WorkGroupSize.x);
    cubeCoord.z = header.Face;

    vec3 worldPos = CubeCoordToWorld(cubeCoord, cubemapSize);

    vec3 normal = normalize(worldPos);

    vec3 up = vec3(0.0f, 1.0f, 0.0f);
    vec3 right = normalize(cross(up, normal));
    up = cross(normal, right);

    vec3 irradiance = vec3(0.0f);

    float delta = 0.025;
    float nrSamples = 0.0f;

    for(float phi = 0.0f; phi < PI * 2.0f; phi += delta)
    {
        for(float theta = 0.0f; theta < PI / 2.0f; theta += delta)
        {
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;

            ivec3 sampleCoord = TexCoordToCube(sampleVec, cubemapSize);

            irradiance += imageLoad(hdrMap, sampleCoord).rgb * cos(theta) * sin(theta);
            nrSamples++;
        }
    }

    irradiance = PI * irradiance * (1.0 / float(nrSamples));
    imageStore(map, cubeCoord, vec4(irradiance, 1.0));
}